heat_template_version: 2014-10-16

description: Basic template to create service chains (SFC) with Netfloc
parameters:
  image_endpoints:
    type: string
    label: Endpoints image
    description: Image to use for sender and receiver 
    default: sender_snap

  image_vnfs:
    type: string
    label: VNF image
    description: dummy VNF (vTC) image
    default: vnf_snap

  sshkey:
    type: string
    label: VMs ssh key
    description: The ssh key for the VMs
    default: cloudkey

  public_network:
    type: string
    label: Public network
    description: ID of public network
    default: 5c220f9d-5127-4143-8411-32fabee9e9db

  flavor:
    type: string
    label: VMs flavor
    description: Must be a valid OpenStack flavor
    default: m1.medium
    constraints:
      - allowed_values:
        - m1.tiny
        - m1.small
        - m1.medium

  odl_username:
    type: string
    label: ODL User Name
    default: admin
    description: User name for Open Daylight (ODL) Restconf access

  odl_password:
    type: string
    label: ODL Password
    default: admin
    description: Password for ODL Restconf access

  netfloc_ip_port:
    type: string
    label: Netfloc IP and port number
    default: 10.30.0.61:8181
    description: IP and port of the Netfloc node

resources:
  sender_sfc_port:
      type: OS::Neutron::Port
      properties:
        network_id:
          get_resource: sfc_in_network
        fixed_ips:
          - subnet_id:
              get_resource: sfc_in_subnet

  sender_floating_ip_port:
    type: OS::Neutron::Port
    properties:
      network_id:
        get_resource: private_network
      fixed_ips:
        - subnet_id:
            get_resource: private_subnet

  sender_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id:
        get_param: public_network
      port_id:
        get_resource: sender_floating_ip_port

  sender:
    type: OS::Nova::Server
    properties:
      name: Alice
      key_name: { get_param: sshkey }
      image:
        get_param: image_endpoints
      flavor:
        get_param: flavor
      networks:
        - port:
            get_resource: sender_sfc_port
        - port:
            get_resource: sender_floating_ip_port

  receiver_sfc_port:
      type: OS::Neutron::Port
      properties:
        network_id:
          get_resource: sfc_in_network
        fixed_ips:
          - subnet_id:
              get_resource: sfc_in_subnet

  receiver_floating_ip_port:
    type: OS::Neutron::Port
    properties:
      network_id:
        get_resource: private_network
      fixed_ips:
        - subnet_id:
            get_resource: private_subnet

  receiver_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id:
        get_param: public_network
      port_id:
        get_resource: receiver_floating_ip_port

  receiver:
    type: OS::Nova::Server
    properties:
      name: Bob
      key_name: { get_param: sshkey }
      image:
        get_param: image_endpoints
      flavor:
        get_param: flavor
      networks:
        - port:
            get_resource: receiver_sfc_port
        - port:
            get_resource: receiver_floating_ip_port

  vnf_in_port:
    type: OS::Neutron::Port
    properties:
      network_id:
        get_resource: sfc_in_network
      fixed_ips:
        - subnet_id:
            get_resource: sfc_in_subnet

  vnf_out_port:
    type: OS::Neutron::Port
    properties:
      network_id:
        get_resource: sfc_out_network
      fixed_ips:
        - subnet_id:
            get_resource: sfc_out_subnet

  vnf_floating_ip_port:
    type: OS::Neutron::Port
    properties:
      network_id:
        get_resource: private_network
      fixed_ips:
        - subnet_id:
            get_resource: private_subnet

  vnf_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id:
        get_param: public_network
      port_id:
        get_resource: vnf_floating_ip_port

  vnf:
    type: OS::Nova::Server
    properties:
      name: dummy-vnf
      key_name: { get_param: sshkey }
      image:
        get_param: image_vnfs
      flavor:
        get_param: flavor
      networks:
        - port:
            get_resource: vnf_floating_ip_port
        - port:
            get_resource: vnf_in_port
        - port:
            get_resource: vnf_out_port

  private_network:
    type: OS::Neutron::Net
    properties:
      name: private_network

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: private_subnet
      network_id:
        get_resource: private_network
      cidr: 13.13.13.0/24
      gateway_ip: 13.13.13.1

  sfc_in_network:
    type: OS::Neutron::Net
    properties:
      name: sfc_in

  sfc_in_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: sfc_in_subnet
      network_id:
        get_resource: sfc_in_network
      cidr: 192.168.1.0/24
      gateway_ip: 192.168.1.1

  sfc_out_network:
    type: OS::Neutron::Net
    properties:
      name: sfc_out

  sfc_out_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: sfc_out_subnet
      network_id:
        get_resource: sfc_out_network
      cidr: 192.168.2.0/24
      gateway_ip: 192.168.2.1

  router:
    type: OS::Neutron::Router
    properties:
      name: Router1
      external_gateway_info: 
        network:
          get_param: public_network

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id:
        get_resource: router
      subnet:
        get_resource: private_subnet

  chain_create:
    type: Netfloc::Chain::Create
    depends_on: [sender, receiver, vnf, sender_sfc_port, vnf_in_port, vnf_out_port, receiver_sfc_port]
    properties:
      sender_sfc_port:
        get_resource: sender_sfc_port
      vnf_in_port:
        get_resource: vnf_in_port
      vnf_out_port:
        get_resource: vnf_out_port
      receiver_sfc_port:
        get_resource: receiver_sfc_port
      odl_username : { get_param: odl_username }
      odl_password: { get_param: odl_password }
      netfloc_ip_port: { get_param: netfloc_ip_port }

outputs:
  sender_sfc_port:
    description: SFC port of sender VM
    value:
      get_resource: sender_sfc_port
  vnf_sfc_in_port:
    description: SFC ingress port of VNF
    value:
      get_resource: vnf_in_port
  vnf_sfc_out_port:
    description: SFC egress port of VNF
    value:
      get_resource: vnf_out_port
  receiver_sfc_port:
    description: SFC port of receiver VM
    value:
      get_resource: receiver_sfc_port
  chain_id:
    description: Id of the created chain
    value:
      get_resource: chain_create
